#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

#
# generated by racc
#
require 'crask/parser/racc_parser.rex'

module CRask
  class RaccParser < Racc::Parser

module_eval(<<'...end racc_parser.racc/module_eval...', 'racc_parser.racc', 33)

...end racc_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    23,     8,    11,    13,    15,    34,    28,    35,    29,
     3,    17,    18,    19,    20,    20,     7,    24,    26,    27,
     6,    31,    32,     4,    36,    39,    40,    41 ]

racc_action_check = [
     9,    19,     7,     9,     9,     9,    30,    25,    30,    25,
     1,    11,    13,    15,    17,    18,     4,    20,    21,    22,
     3,    27,    28,     2,    34,    36,    39,    40 ]

racc_action_pointer = [
   nil,    10,    21,    20,    13,   nil,   nil,    -2,   nil,    -5,
   nil,     8,   nil,     9,   nil,     9,   nil,     2,     3,    -4,
    14,    14,    15,   nil,   nil,    -4,   nil,    16,    19,   nil,
     3,   nil,   nil,   nil,    17,   nil,    22,   nil,   nil,    20,
    24,   nil ]

racc_action_default = [
    -2,   -22,    -1,   -22,   -22,    -3,    42,   -22,    -5,   -22,
    -4,   -22,    -6,   -22,    -7,   -22,    -8,   -20,   -20,   -22,
   -22,   -22,   -22,   -17,   -18,   -22,   -13,   -22,   -22,   -21,
   -22,   -16,   -19,   -14,   -22,   -15,   -22,   -11,   -12,   -10,
   -22,    -9 ]

racc_goto_table = [
    21,    22,    16,     5,     9,    12,    14,     2,    37,    38,
    33,    30,     1,    25 ]

racc_goto_check = [
    12,    12,     7,     3,     4,     5,     6,     2,     8,     9,
    10,    11,     1,    13 ]

racc_goto_pointer = [
   nil,    12,     7,     1,    -4,    -4,    -3,    -7,   -28,   -27,
   -20,   -15,   -17,    -7 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 15, :_reduce_1,
  0, 16, :_reduce_2,
  2, 16, :_reduce_3,
  5, 17, :_reduce_4,
  0, 18, :_reduce_5,
  2, 18, :_reduce_6,
  2, 18, :_reduce_7,
  2, 18, :_reduce_8,
  3, 22, :_reduce_9,
  1, 23, :_reduce_10,
  1, 23, :_reduce_none,
  3, 24, :_reduce_12,
  0, 25, :_reduce_13,
  2, 25, :_reduce_14,
  6, 19, :_reduce_15,
  5, 20, :_reduce_16,
  3, 21, :_reduce_17,
  1, 27, :_reduce_18,
  3, 27, :_reduce_19,
  0, 26, :_reduce_20,
  3, 26, :_reduce_21 ]

racc_reduce_n = 22

racc_shift_n = 42

racc_token_table = {
  false => 0,
  :error => 1,
  :class => 2,
  :identifier => 3,
  :brace_open => 4,
  :brace_close => 5,
  :dot => 6,
  :assign => 7,
  :def => 8,
  :ctor => 9,
  :dtor => 10,
  :comma => 11,
  :paren_open => 12,
  :paren_close => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "class",
  "identifier",
  "brace_open",
  "brace_close",
  "dot",
  "assign",
  "def",
  "ctor",
  "dtor",
  "comma",
  "paren_open",
  "paren_close",
  "$start",
  "target",
  "class_defs",
  "class_def",
  "method_defs",
  "method_def",
  "ctor_def",
  "dtor_def",
  "method_call",
  "expression",
  "statement",
  "statements",
  "arguments",
  "comma_separated_identifiers" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'racc_parser.racc', 2)
  def _reduce_1(val, _values, result)
     result = Ast::Ast.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 3)
  def _reduce_2(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 4)
  def _reduce_3(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 5)
  def _reduce_4(val, _values, result)
     result = Ast::ClassDef.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 6)
  def _reduce_5(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 7)
  def _reduce_6(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 8)
  def _reduce_7(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 9)
  def _reduce_8(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 10)
  def _reduce_9(val, _values, result)
     result = Ast::MethodCall.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 11)
  def _reduce_10(val, _values, result)
     result = Ast::Identifier.new(val[0]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'racc_parser.racc', 13)
  def _reduce_12(val, _values, result)
     result = Ast::Assignment.new(Ast::Identifier.new(val[0]), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 14)
  def _reduce_13(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 15)
  def _reduce_14(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 16)
  def _reduce_15(val, _values, result)
     result = Ast::MethodDef.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 17)
  def _reduce_16(val, _values, result)
     result = Ast::CtorDef.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 18)
  def _reduce_17(val, _values, result)
     result = Ast::DtorDef.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 19)
  def _reduce_18(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 20)
  def _reduce_19(val, _values, result)
     result << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 21)
  def _reduce_20(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'racc_parser.racc', 22)
  def _reduce_21(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RaccParser
  end   # module CRask


